import asyncio
import sys
from datetime import datetime
import logging

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand

from config import BOT_TOKEN, ADMIN_ID, validate_config, LOG_LEVEL
from database import create_db, async_sessionmaker
from handlers import router as main_router
from middleware import DatabaseMiddleware

# ===== TELEGRAM BOT SETUP =====
async def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    try:
        if not validate_config():
            logger.error("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return False
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RoadMap Telegram Bot...")
        
        await create_db()
        
        bot = Bot(
            token=BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        
        dp = Dispatcher(storage=MemoryStorage())
        
        dp.message.middleware(DatabaseMiddleware())
        dp.callback_query.middleware(DatabaseMiddleware())
        
        dp["bot"] = bot
        
        dp.include_router(main_router)
        
        commands = [
            BotCommand(command="/start", description="üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="/help", description="‚ùì –°–ø—Ä–∞–≤–∫–∞"),
            BotCommand(command="/add_project", description="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"),
            BotCommand(command="/add_task", description="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"),
            BotCommand(command="/roadmap", description="üó∫ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–æ–∞–¥–º–∞–ø—ã"),
            BotCommand(command="/set_channel", description="üì¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª"),
            BotCommand(command="/update_task", description="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"),
            BotCommand(command="/admin", description="üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"),
        ]
        await bot.set_my_commands(commands)
        
        me = await bot.get_me()
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.username} (ID: {me.id})")
        
        try:
            startup_message = (
                f"üöÄ <b>RoadMapEx –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                f"ü§ñ –ë–æ—Ç: @{me.username} (ID: {me.id})\n"
                f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite\n"
                f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%H:%M:%S')}\n\n"
                f"<b>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                f"/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                f"/add_project - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
                f"/add_task - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
                f"/roadmap - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–æ–∞–¥–º–∞–ø—ã\n"
                f"/set_channel - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª\n"
                f"/update_task - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏\n"
                f"/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"
            )
            
            if ADMIN_ID != 0:
                await bot.send_message(ADMIN_ID, startup_message, parse_mode="HTML")
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (ID: {ADMIN_ID})")
            
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
        
        logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞...")
        await dp.start_polling(bot, handle_signals=False)
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        if 'bot' in locals():
            await bot.session.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

# ===== MAIN FUNCTION =====
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    logger.info("RoadMapEx - Telegram Bot")
    logger.info("=" * 40)
    
    if not validate_config():
        return False
    
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    await setup_bot()

if __name__ == "__main__":
    try:
        logging.basicConfig(
            level=LOG_LEVEL,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
                
        logger = logging.getLogger(__name__)
        logger.info(__name__)
        asyncio.run(main())
        
    except KeyboardInterrupt:
        logger.warning("\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
    except Exception as e:
        logger.warning(f"\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.warning("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        sys.exit(1)