from datetime import datetime
from typing import List
from models import Project, Task

def format_roadmap_message(project: Project, tasks: List[Task]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–∞–¥–º–∞–ø–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª"""
    
    roadmap = f"üó∫ <b>Roadmap –ø—Ä–æ–µ–∫—Ç–∞: {project.name}</b>\n\n"
    
    if project.description:
        roadmap += f"üìÑ {project.description}\n\n"
    
    sorted_tasks = sorted(tasks, key=lambda t: t.order_index)
    
    total_tasks = len(sorted_tasks)
    completed_tasks = len([t for t in sorted_tasks if t.status == "completed"])
    in_progress_tasks = len([t for t in sorted_tasks if t.status == "in_progress"])
    planned_tasks = len([t for t in sorted_tasks if t.status == "planned"])
    cancelled_tasks = len([t for t in sorted_tasks if t.status == "cancelled"])
    
    progress = int((completed_tasks / total_tasks) * 100) if total_tasks > 0 else 0
    
    roadmap += f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–∞: {progress}%</b>\n"
    roadmap += f"{'‚ñì' * (progress // 10)}{'‚ñë' * (10 - progress // 10)} {completed_tasks}/{total_tasks}\n\n"
    
    if not sorted_tasks:
        roadmap += "üìù <i>–ó–∞–¥–∞—á–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</i>\n\n"
    else:
        roadmap += f"üìã <b>–ó–∞–¥–∞—á–∏ ({total_tasks}):</b>\n"
        
        for task in sorted_tasks:
            if task.status == "completed":
                emoji = "‚úÖ"
            elif task.status == "in_progress":
                emoji = "üîÑ"
            elif task.status == "planned":
                emoji = "‚è≥"
            elif task.status == "cancelled":
                emoji = "‚ùå"
            else:
                emoji = "‚ùì"
            
            roadmap += f"{emoji} {task.title}\n"
            
            if task.description:
                roadmap += f"    - {task.description}\n"
    
    if total_tasks > 0:
        roadmap += f"\nüìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        if completed_tasks > 0:
            roadmap += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_tasks}\n"
        if in_progress_tasks > 0:
            roadmap += f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {in_progress_tasks}\n"
        if planned_tasks > 0:
            roadmap += f"‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {planned_tasks}\n"
        if cancelled_tasks > 0:
            roadmap += f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled_tasks}\n"
        roadmap += "\n"
    
    roadmap += f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
    roadmap += f"ü§ñ <a href='https://t.me/roadmapex_bot'>RoadMapEx Bot</a>"
    
    return roadmap

def format_task_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    status_emojis = {
        "planned": "‚è≥",
        "in_progress": "üîÑ", 
        "completed": "‚úÖ",
        "cancelled": "‚ùå"
    }
    return status_emojis.get(status, "‚ùì")

def format_task_status_text(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    status_texts = {
        "planned": "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞",
        "in_progress": "–í —Ä–∞–±–æ—Ç–µ",
        "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–∞", 
        "cancelled": "–û—Ç–º–µ–Ω–µ–Ω–∞"
    }
    return status_texts.get(status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

def format_project_stats(tasks: List[Task]) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞"""
    total = len(tasks)
    completed = len([t for t in tasks if t.status == "completed"])
    in_progress = len([t for t in tasks if t.status == "in_progress"])
    planned = len([t for t in tasks if t.status == "planned"])
    cancelled = len([t for t in tasks if t.status == "cancelled"])
    
    progress = int((completed / total) * 100) if total > 0 else 0
    
    return {
        "total": total,
        "completed": completed,
        "in_progress": in_progress,
        "planned": planned,
        "cancelled": cancelled,
        "progress": progress
    }

def format_progress_bar(progress: int, width: int = 10) -> str:
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    filled = int(progress / 100 * width)
    empty = width - filled
    return "‚ñì" * filled + "‚ñë" * empty

def format_task_list_compact(tasks: List[Task], max_tasks: int = 5) -> str:
    """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    if not tasks:
        return "üìù <i>–ó–∞–¥–∞—á –Ω–µ—Ç</i>"
    
    result = ""
    shown_tasks = tasks[:max_tasks]
    
    for i, task in enumerate(shown_tasks, 1):
        emoji = format_task_status_emoji(task.status)
        result += f"{emoji} {task.title[:30]}{'...' if len(task.title) > 30 else ''}\n"
    
    if len(tasks) > max_tasks:
        result += f"... –∏ –µ—â–µ {len(tasks) - max_tasks} –∑–∞–¥–∞—á\n"
    
    return result