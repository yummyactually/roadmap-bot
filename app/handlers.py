from aiogram import Router, F, Bot
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, 
    InlineKeyboardButton, BufferedInputFile
)
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func

from dao import UserDAO, ProjectDAO, TaskDAO
from format_utils import format_roadmap_message
from config import ADMIN_ID
from datetime import datetime

async def check_bot_in_channel(bot: Bot, channel_id: str) -> dict:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
    try:
        bot_member = await bot.get_chat_member(channel_id, bot.id)
        
        if bot_member.status == "kicked":
            return {"status": "kicked", "message": "–ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞"}
        elif bot_member.status == "left":
            return {"status": "left", "message": "–ë–æ—Ç –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª"}
        elif bot_member.status in ["administrator", "creator"]:
            if hasattr(bot_member, 'can_edit_messages') and bot_member.can_edit_messages:
                return {"status": "ok", "message": "–ë–æ—Ç –∏–º–µ–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞"}
            else:
                return {"status": "no_rights", "message": "–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"}
        elif bot_member.status == "member":
            return {"status": "member", "message": "–ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º, –Ω–æ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"}
        else:
            return {"status": "unknown", "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {bot_member.status}"}
            
    except Exception as e:
        error_msg = str(e).lower()
        if "bot was kicked" in error_msg or "forbidden" in error_msg:
            return {"status": "kicked", "message": "–ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"}
        elif "chat not found" in error_msg:
            return {"status": "not_found", "message": "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        else:
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)[:50]}..."}

router = Router()

# ===== FSM –°–û–°–¢–û–Ø–ù–ò–Ø =====
class ProjectStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()

class TaskStates(StatesGroup):
    waiting_for_project_id = State()
    waiting_for_title = State()
    waiting_for_description = State()

class ChannelStates(StatesGroup):
    waiting_for_project_id = State()
    waiting_for_channel_id = State()

class DeleteStates(StatesGroup):
    confirm_delete_project = State()
    confirm_delete_task = State()

class MoveTaskStates(StatesGroup):
    waiting_for_new_position = State()

# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====

@router.message(CommandStart())
async def start_command(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = await UserDAO.get_or_create_user(
            session=session,
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        projects = await ProjectDAO.get_user_projects(session, user.id)
        total_tasks = 0
        completed_tasks = 0
        
        for project in projects:
            tasks = await TaskDAO.get_project_tasks(session, project.id)
            total_tasks += len(tasks)
            for task in tasks:
                if task.status == "completed":
                    completed_tasks += 1
        
        progress = int((completed_tasks / total_tasks) * 100) if total_tasks > 0 else 0
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìã –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="my_projects"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")
            ],
            [
                InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="create_project"),
                InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task_menu")
            ],
            [
                InlineKeyboardButton(text="üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏", callback_data="manage_tasks"),
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–µ–Ω–∏–µ", callback_data="delete_menu")
            ],
            [
                InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ])
        
        welcome_text = (
            f"üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!</b>\n\n"
            f"üó∫ <b>RoadMapEx</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –≤ Telegram\n\n"
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üìÅ –ü—Ä–æ–µ–∫—Ç–æ–≤: <b>{len(projects)}</b>\n"
            f"üìù –ó–∞–¥–∞—á: <b>{total_tasks}</b>\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: <b>{completed_tasks}</b>\n"
            f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: <b>{progress}%</b>\n\n"
            f"üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(Command("help"))
async def help_command(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    help_text = (
        "ü§ñ <b>RoadMapEx - –°–ø—Ä–∞–≤–∫–∞</b>\n\n"
        
        "<b>üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/add_project - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
        "/add_task - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/roadmap - –ü–æ–∫–∞–∑–∞—Ç—å Roadmap\n"
        "/set_channel - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª\n"
        "/update_task - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏\n"
        "/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        
        "<b>üéØ –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á:</b>\n"
        "‚è≥ <i>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è</i> - –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞\n"
        "üîÑ <i>–í —Ä–∞–±–æ—Ç–µ</i> - –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è\n"
        "‚úÖ <i>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è</i> - –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n"
        "‚ùå <i>–û—Ç–º–µ–Ω–µ–Ω–Ω–∞—è</i> - –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
        
        "<b>üì¢ –ö–∞–Ω–∞–ª—ã:</b>\n"
        "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_channel –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞–Ω–∞–ª–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É\n"
        "‚Ä¢ Roadmap –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª–µ\n"
        "‚Ä¢ –ü—Ä–∏ –∫–∏–∫–µ –±–æ—Ç–∞ –∫–∞–Ω–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤—è–∑—ã–≤–∞–µ—Ç—Å—è\n\n"
        
        "<b>üóë –£–¥–∞–ª–µ–Ω–∏–µ:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–£–¥–∞–ª–µ–Ω–∏–µ' –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –µ–≥–æ –∑–∞–¥–∞—á–∏\n"
        "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ - –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã\n\n"
        
        "<b>üí° –°–æ–≤–µ—Ç—ã:</b>\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞—á\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á\n\n"
        
        "<b>üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–æ–º –∑–∞–¥–∞—á:</b>\n"
        "‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤–∏–¥–Ω—ã –Ω–æ–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞\n"
        "‚Ä¢ –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞\n\n"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    
    await message.answer(help_text, reply_markup=keyboard, parse_mode="HTML")

@router.message(Command("add_project"))
async def add_project_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
    ])
    
    await message.answer(
        "üÜï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\" –∏–ª–∏ \"–°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏\"</i>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(ProjectStates.waiting_for_name)

@router.message(Command("add_task"))
async def add_task_command(message: Message, state: FSMContext, session: AsyncSession):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        user = await UserDAO.get_or_create_user(
            session=session,
            telegram_id=message.from_user.id
        )
        
        projects = await ProjectDAO.get_user_projects(session, user.id)
        
        if not projects:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="create_project")],
                [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_start")]
            ])
            
            await message.answer(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á!",
                reply_markup=keyboard
            )
            return
        
        keyboard_buttons = []
        for project in projects:
            tasks_count = len(await TaskDAO.get_project_tasks(session, project.id))
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üìÅ {project.name} ({tasks_count} –∑–∞–¥–∞—á)",
                    callback_data=f"select_project_{project.id}"
                )
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await message.answer(
            "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(TaskStates.waiting_for_project_id)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(Command("roadmap"))
async def roadmap_command(message: Message, session: AsyncSession):
    try:
        user = await UserDAO.get_or_create_user(
            session=session,
            telegram_id=message.from_user.id
        )
        
        projects = await ProjectDAO.get_user_projects(session, user.id)
        
        if not projects:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç", callback_data="create_project")],
                [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_start")]
            ])
            
            await message.answer(
                "üìã <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            return
        
        for project in projects:
            tasks = await TaskDAO.get_project_tasks(session, project.id)
            roadmap_text = format_roadmap_message(project, tasks)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"add_task_{project.id}"),
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"update_channel_{project.id}")
                ],
                [
                    InlineKeyboardButton(text="üì¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"set_channel_{project.id}"),
                    InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data=f"delete_project_{project.id}")
                ],
                [
                    InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="back_to_start")
                ]
            ])
            
            await message.answer(roadmap_text, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(Command("set_channel"))
async def set_channel_command(message: Message, state: FSMContext, session: AsyncSession):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞–Ω–∞–ª–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É"""
    try:
        user = await UserDAO.get_or_create_user(
            session=session,
            telegram_id=message.from_user.id
        )
        
        projects = await ProjectDAO.get_user_projects(session, user.id)
        
        if not projects:
            await message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.")
            return
        
        keyboard_buttons = []
        for project in projects:
            status = "‚úÖ" if project.channel_id else "‚ûï"
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{status} {project.name}",
                    callback_data=f"set_channel_{project.id}"
                )
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await message.answer(
            "üì¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞:</b>\n\n"
            "‚úÖ - –∫–∞–Ω–∞–ª —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
            "‚ûï - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(Command("update_task"))
async def update_task_command(message: Message, session: AsyncSession):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    try:
        user = await UserDAO.get_or_create_user(
            session=session,
            telegram_id=message.from_user.id
        )
        
        projects = await ProjectDAO.get_user_projects(session, user.id)
        
        if not projects:
            await message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏.")
            return
        
        all_tasks = []
        for project in projects:
            tasks = await TaskDAO.get_project_tasks(session, project.id)
            for task in tasks:
                all_tasks.append((task, project.name))
        
        if not all_tasks:
            await message.answer("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return
        
        keyboard_buttons = []
        for task, project_name in all_tasks[:10]:  
            status_emoji = {"planned": "‚è≥", "in_progress": "üîÑ", "completed": "‚úÖ", "cancelled": "‚ùå"}
            emoji = status_emoji.get(task.status, "‚ùì")
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{emoji} {task.title[:30]}... ({project_name})",
                    callback_data=f"update_task_{task.id}"
                )
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await message.answer(
            "üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(Command("admin"))
async def admin_command(message: Message, session: AsyncSession):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    try:
        if message.from_user.id != ADMIN_ID:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        from models import User, Project, Task
        
        all_users_result = await session.execute(select(User))
        all_users = all_users_result.scalars().all()
        real_users = [u for u in all_users if not (u.username and u.username.lower().endswith('bot'))]
        
        projects_count = await session.execute(
            select(func.count(Project.id)).where(Project.is_active == True)
        )
        tasks_count = await session.execute(select(func.count(Task.id)))
        completed_tasks = await session.execute(
            select(func.count(Task.id)).where(Task.status == 'completed')
        )
        
        admin_text = (
            "üîß <b>–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê</b>\n\n"
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(real_users)}</b>\n"
            f"üìÅ –ü—Ä–æ–µ–∫—Ç–æ–≤: <b>{projects_count.scalar()}</b>\n"
            f"‚úÖ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: <b>{tasks_count.scalar()}</b>\n"
            f"üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: <b>{completed_tasks.scalar()}</b>\n\n"
            f"üñ• <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:</b>\n"
            f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite\n"
            f"‚è∞ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}\n"
            f"ü§ñ –†–µ–∂–∏–º: Telegram Bot"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç JSON", callback_data="export_users_json"),
                InlineKeyboardButton(text="üìù –≠–∫—Å–ø–æ—Ä—Ç TXT", callback_data="export_users_txt")
            ],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
        ])
        
        await message.answer(admin_text, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò FSM =====

@router.message(ProjectStates.waiting_for_name)
async def project_name_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        if len(message.text) > 100:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ."
            )
            return
        
        await state.update_data(name=message.text.strip())
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="skip_description")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
        ])
        
        await message.answer(
            "üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n"
            "üí¨ –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':\n\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: \"–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏\"</i>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(ProjectStates.waiting_for_description)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(ProjectStates.waiting_for_description)  
async def project_description_handler(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        if len(message.text) > 1000:
            await message.answer(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤).\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ."
            )
            return
        
        data = await state.get_data()
        
        user = await UserDAO.get_or_create_user(
            session=session,
            telegram_id=message.from_user.id
        )
        
        project = await ProjectDAO.create_project(
            session=session,
            name=data["name"],
            description=message.text.strip(),
            owner_id=user.id
        )
        
        await state.clear()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"add_task_{project.id}"),
                InlineKeyboardButton(text="üì¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"set_channel_{project.id}")
            ],
            [
                InlineKeyboardButton(text="üó∫ –ü–æ–∫–∞–∑–∞—Ç—å Roadmap", callback_data=f"show_roadmap_{project.id}"),
                InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")
            ]
        ])
        
        success_text = (
            f"‚úÖ <b>–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üìÅ <b>{project.name}</b>\n"
            f"üìù {project.description}\n\n"
            f"üÜî ID –ø—Ä–æ–µ–∫—Ç–∞: {project.id}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {project.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üéØ <b>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>\n"
            f"‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É\n"
            f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
        )
        
        await message.answer(success_text, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(TaskStates.waiting_for_title)
async def task_title_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        if len(message.text) > 200:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)."
            )
            return
        
        await state.update_data(title=message.text.strip())
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="skip_task_description")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
        ])
        
        await message.answer(
            "üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n"
            "üí¨ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':\n\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: \"–°–æ–∑–¥–∞—Ç—å –º–∞–∫–µ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º\"</i>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(TaskStates.waiting_for_description)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(TaskStates.waiting_for_description)
async def task_description_handler(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        data = await state.get_data()
        
        if "title" not in data or "project_id" not in data:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        user = await UserDAO.get_or_create_user(
            session=session,
            telegram_id=message.from_user.id
        )
        
        task = await TaskDAO.create_task(
            session=session,
            title=data["title"],
            description=message.text.strip(),
            project_id=data["project_id"],
            creator_id=user.id,
            priority="medium"
        )
        
        await state.clear()
        
        project = await ProjectDAO.get_project_by_id(session, data["project_id"])
        
        update_message = ""
        if project and project.channel_id and project.message_id and bot:
            try:
                tasks = await TaskDAO.get_project_tasks(session, project.id)
                roadmap_text = format_roadmap_message(project, tasks)
                
                await bot.edit_message_text(
                    text=roadmap_text,
                    chat_id=project.channel_id,
                    message_id=project.message_id,
                    parse_mode="HTML"
                )
                
                update_message = "\nüîÑ Roadmap –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ!"
            except Exception as e:
                update_message = f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)[:50]}..."
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
        ])
        
        await message.answer(
            f"‚úÖ <b>–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>{update_message}\n\n"
            f"üìù <b>{task.title}</b>\n"
            f"üìÑ {task.description}\n\n"
            f"üÜî ID: {task.id}\n"
            f"üìÅ –ü—Ä–æ–µ–∫—Ç: {project.name if project else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
            f"‚è≥ –°—Ç–∞—Ç—É—Å: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(ChannelStates.waiting_for_channel_id)
async def channel_id_handler(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∫–∞–Ω–∞–ª–∞"""
    try:
        data = await state.get_data()
        project_id = data.get("project_id")
        
        if not project_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        
        channel_id = message.text.strip()
        
        if not (channel_id.startswith('@') or channel_id.startswith('-') or channel_id.isdigit()):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "‚Ä¢ @channel_username\n"
                "‚Ä¢ -100123456789 (ID –∫–∞–Ω–∞–ª–∞)\n"
                "‚Ä¢ 123456789 (ID —á–∞—Ç–∞)"
            )
            return
        
        await ProjectDAO.update_project(
            session=session,
            project_id=project_id,
            channel_id=channel_id
        )
        
        project = await ProjectDAO.get_project_by_id(session, project_id)
        tasks = await TaskDAO.get_project_tasks(session, project_id)
        roadmap_text = format_roadmap_message(project, tasks)
        
        if bot:
            sent_message = await bot.send_message(
                chat_id=channel_id,
                text=roadmap_text,
                parse_mode="HTML"
            )
            
            await ProjectDAO.update_roadmap_message(session, project_id, sent_message.message_id)
        
        await state.clear()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
        ])
        
        await message.answer(
            f"‚úÖ <b>–ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: <code>{channel_id}</code>\n"
            f"üìù Roadmap –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ\n"
            f"üîÑ –ë—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")

@router.message(MoveTaskStates.waiting_for_new_position)
async def move_task_position_handler(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏"""
    try:
        data = await state.get_data()
        task_id = data.get("task_id")
        project_id = data.get("project_id")
        
        if not task_id or not project_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        try:
            new_position = int(message.text.strip())
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (—á–∏—Å–ª–æ)!")
            return
        
        tasks = await TaskDAO.get_project_tasks(session, project_id)
        if new_position < 1 or new_position > len(tasks):
            await message.answer(f"‚ùå –ü–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(tasks)}!")
            return
        
        success = await TaskDAO.move_task_to_position(session, task_id, new_position)
        
        if success:
            project = await ProjectDAO.get_project_by_id(session, project_id)
            
            update_message = ""
            if project and project.channel_id and project.message_id and bot:
                try:
                    updated_tasks = await TaskDAO.get_project_tasks(session, project.id)
                    roadmap_text = format_roadmap_message(project, updated_tasks)
                    
                    await bot.edit_message_text(
                        text=roadmap_text,
                        chat_id=project.channel_id,
                        message_id=project.message_id,
                        parse_mode="HTML"
                    )
                    
                    update_message = "\nüîÑ Roadmap –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ!"
                except Exception as e:
                    if "message is not modified" not in str(e):
                        update_message = f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)[:50]}..."
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìù –ö –∑–∞–¥–∞—á–∞–º –ø—Ä–æ–µ–∫—Ç–∞", callback_data=f"project_tasks_{project_id}_0"),
                    InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")
                ]
            ])
            
            await message.answer(
                f"‚úÖ <b>–ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞!</b>{update_message}\n\n"
                f"üìù –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {new_position}\n"
                f"üìÅ –ü—Ä–æ–µ–∫—Ç: {project.name if project else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏.")
        
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

# ===== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====

@router.callback_query(F.data == "my_projects")
async def my_projects_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await callback.answer()
        
        user = await UserDAO.get_or_create_user(
            session=session,
            telegram_id=callback.from_user.id
        )
        
        projects = await ProjectDAO.get_user_projects(session, user.id)
        
        if not projects:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="create_project")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ])
            
            await callback.message.edit_text(
                "üìã <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            return
        
        keyboard_buttons = []
        for project in projects:
            tasks = await TaskDAO.get_project_tasks(session, project.id)
            tasks_count = len(tasks)
            completed_count = len([t for t in tasks if t.status == "completed"])
            progress = f"{completed_count}/{tasks_count}" if tasks_count > 0 else "0/0"
            
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üìÅ {project.name} ({progress})",
                    callback_data=f"show_roadmap_{project.id}"
                )
            ])
        
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="create_project")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            f"üìÅ <b>–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã ({len(projects)}):</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "my_stats")
async def my_stats_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await callback.answer()
        
        user = await UserDAO.get_or_create_user(
            session=session,
            telegram_id=callback.from_user.id
        )
        
        projects = await ProjectDAO.get_user_projects(session, user.id)
        
        total_tasks = 0
        completed_tasks = 0
        in_progress_tasks = 0
        planned_tasks = 0
        
        for project in projects:
            tasks = await TaskDAO.get_project_tasks(session, project.id)
            total_tasks += len(tasks)
            for task in tasks:
                if task.status == "completed":
                    completed_tasks += 1
                elif task.status == "in_progress":
                    in_progress_tasks += 1
                elif task.status == "planned":
                    planned_tasks += 1
        
        progress = int((completed_tasks / total_tasks) * 100) if total_tasks > 0 else 0
        
        stats_text = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üìÅ –ü—Ä–æ–µ–∫—Ç–æ–≤: <b>{len(projects)}</b>\n"
            f"üìù –í—Å–µ–≥–æ –∑–∞–¥–∞—á: <b>{total_tasks}</b>\n\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: <b>{completed_tasks}</b>\n"
            f"üîÑ –í —Ä–∞–±–æ—Ç–µ: <b>{in_progress_tasks}</b>\n"
            f"‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: <b>{planned_tasks}</b>\n\n"
            f"üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: <b>{progress}%</b>\n"
            f"{'‚ñà' * (progress // 10)}{'‚ñë' * (10 - progress // 10)}\n\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "create_project")
async def create_project_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ callback"""
    try:
        await callback.answer()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
        ])
        
        await callback.message.edit_text(
            "üÜï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\" –∏–ª–∏ \"–°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏\"</i>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(ProjectStates.waiting_for_name)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "add_task_menu")
async def add_task_menu_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        await callback.answer()
        
        user = await UserDAO.get_or_create_user(
            session=session,
            telegram_id=callback.from_user.id
        )
        
        projects = await ProjectDAO.get_user_projects(session, user.id)
        
        if not projects:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="create_project")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ])
            
            await callback.message.edit_text(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á!",
                reply_markup=keyboard
            )
            return
        
        keyboard_buttons = []
        for project in projects:
            tasks_count = len(await TaskDAO.get_project_tasks(session, project.id))
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üìÅ {project.name} ({tasks_count} –∑–∞–¥–∞—á)",
                    callback_data=f"select_project_{project.id}"
                )
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(TaskStates.waiting_for_project_id)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "manage_tasks")
async def manage_tasks_callback(callback: CallbackQuery, session: AsyncSession):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
    try:
        await callback.answer()
        
        user = await UserDAO.get_or_create_user(
            session=session,
            telegram_id=callback.from_user.id
        )
        
        projects = await ProjectDAO.get_user_projects(session, user.id)
        
        all_tasks = []
        for project in projects:
            tasks = await TaskDAO.get_project_tasks(session, project.id)
            for task in tasks:
                all_tasks.append((task, project.name))
        
        if not all_tasks:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task_menu")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ])
            
            await callback.message.edit_text(
                "üìù –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–∏!",
                reply_markup=keyboard
            )
            return
        
        page = 0
        keyboard_buttons = []
        start_idx = page * 8
        end_idx = start_idx + 8
        
        for task, project_name in all_tasks[start_idx:end_idx]:
            status_emoji = {"planned": "‚è≥", "in_progress": "üîÑ", "completed": "‚úÖ", "cancelled": "‚ùå"}
            emoji = status_emoji.get(task.status, "‚ùì")
            callback_data = f"update_task_{task.id}"
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{emoji} {task.title[:25]}...",
                    callback_data=callback_data
                )
            ])
        
        nav_buttons = []
        if len(all_tasks) > 8:
            if page > 0:
                nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tasks_page_{page-1}"))
            if end_idx < len(all_tasks):
                nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"tasks_page_{page+1}"))
            
            if nav_buttons:
                keyboard_buttons.append(nav_buttons)
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        page_info = f" (—Å—Ç—Ä. {page+1}/{((len(all_tasks)-1)//8)+1})" if len(all_tasks) > 8 else ""
        
        await callback.message.edit_text(
            f"üîÑ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ ({len(all_tasks)}){page_info}:</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("tasks_page_"))
async def tasks_page_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∑–∞–¥–∞—á"""
    try:
        await callback.answer()
        
        page = int(callback.data.split("_")[2])
        
        user = await UserDAO.get_or_create_user(
            session=session,
            telegram_id=callback.from_user.id
        )
        
        projects = await ProjectDAO.get_user_projects(session, user.id)
        
        all_tasks = []
        for project in projects:
            tasks = await TaskDAO.get_project_tasks(session, project.id)
            for task in tasks:
                all_tasks.append((task, project.name))
        
        keyboard_buttons = []
        start_idx = page * 8
        end_idx = start_idx + 8
        
        for task, project_name in all_tasks[start_idx:end_idx]:
            status_emoji = {"planned": "‚è≥", "in_progress": "üîÑ", "completed": "‚úÖ", "cancelled": "‚ùå"}
            emoji = status_emoji.get(task.status, "‚ùì")
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{emoji} {task.title[:25]}...",
                    callback_data=f"update_task_{task.id}"
                )
            ])
        
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tasks_page_{page-1}"))
        if end_idx < len(all_tasks):
            nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"tasks_page_{page+1}"))
        
        if nav_buttons:
            keyboard_buttons.append(nav_buttons)
            
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        page_info = f" (—Å—Ç—Ä. {page+1}/{((len(all_tasks)-1)//8)+1})"
        
        await callback.message.edit_text(
            f"üîÑ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ ({len(all_tasks)}){page_info}:</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "delete_menu")
async def delete_menu_callback(callback: CallbackQuery, session: AsyncSession):
    """–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        await callback.answer()
        
        user = await UserDAO.get_or_create_user(
            session=session,
            telegram_id=callback.from_user.id
        )
        
        projects = await ProjectDAO.get_user_projects(session, user.id)
        
        if not projects:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ])
            
            await callback.message.edit_text(
                "üìã <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∑–∞–¥–∞—á–∏.",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            return
        
        keyboard_buttons = [
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã", callback_data="delete_projects_menu")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∏", callback_data="delete_tasks_menu")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            "üóë <b>–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.\n"
            "‚Ä¢ –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ —É–¥–∞–ª—è—é—Ç—Å—è –≤—Å–µ –µ–≥–æ –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –ø—Ä–∏ –≤—ã–±–æ—Ä–µ\n\n"
            "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "delete_projects_menu")
async def delete_projects_menu_callback(callback: CallbackQuery, session: AsyncSession):
    """–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    try:
        await callback.answer()
        
        user = await UserDAO.get_or_create_user(
            session=session,
            telegram_id=callback.from_user.id
        )
        
        projects = await ProjectDAO.get_user_projects(session, user.id)
        
        if not projects:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="delete_menu")]
            ])
            
            await callback.message.edit_text(
                "üìã <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            return
        
        keyboard_buttons = []
        for project in projects:
            tasks = await TaskDAO.get_project_tasks(session, project.id)
            tasks_count = len(tasks)
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üóë {project.name} ({tasks_count} –∑–∞–¥–∞—á)",
                    callback_data=f"confirm_delete_project_{project.id}"
                )
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="delete_menu")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤</b>\n\n"
            "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –µ–≥–æ –∑–∞–¥–∞—á–∏!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "delete_tasks_menu")
async def delete_tasks_menu_callback(callback: CallbackQuery, session: AsyncSession):
    """–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á"""
    try:
        await callback.answer()
        
        user = await UserDAO.get_or_create_user(
            session=session,
            telegram_id=callback.from_user.id
        )
        
        projects = await ProjectDAO.get_user_projects(session, user.id)
        
        all_tasks = []
        for project in projects:
            tasks = await TaskDAO.get_project_tasks(session, project.id)
            for task in tasks:
                all_tasks.append((task, project.name))
        
        if not all_tasks:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="delete_menu")]
            ])
            
            await callback.message.edit_text(
                "üìù <b>–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            return
        
        keyboard_buttons = []
        for task, project_name in all_tasks[:8]:  
            status_emoji = {"planned": "‚è≥", "in_progress": "üîÑ", "completed": "‚úÖ", "cancelled": "‚ùå"}
            emoji = status_emoji.get(task.status, "‚ùì")
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üóë {emoji} {task.title[:20]}... ({project_name[:10]})",
                    callback_data=f"confirm_delete_task_{task.id}"
                )
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="delete_menu")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            f"üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ {len(all_tasks)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("confirm_delete_project_"))
async def confirm_delete_project_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        await callback.answer()
        
        project_id = int(callback.data.split("_")[3])
        project = await ProjectDAO.get_project_by_id(session, project_id)
        
        if not project:
            await callback.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        tasks = await TaskDAO.get_project_tasks(session, project_id)
        tasks_count = len(tasks)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üóë –î–ê, –£–î–ê–õ–ò–¢–¨", callback_data=f"delete_project_{project_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="delete_projects_menu")
            ]
        ])
        
        await callback.message.edit_text(
            f"üóë <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø</b>\n\n"
            f"üìÅ <b>–ü—Ä–æ–µ–∫—Ç:</b> {project.name}\n"
            f"üìù <b>–ó–∞–¥–∞—á:</b> {tasks_count}\n"
            f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {project.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
            f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç:\n"
            f"‚Ä¢ –ü—Ä–æ–µ–∫—Ç \"{project.name}\"\n"
            f"‚Ä¢ –í—Å–µ {tasks_count} –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞\n"
            f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n\n"
            f"‚ùó <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!</b>\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("confirm_delete_task_"))
async def confirm_delete_task_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        await callback.answer()
        
        task_id = int(callback.data.split("_")[3])
        task = await TaskDAO.get_task_by_id(session, task_id)
        
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        project = await ProjectDAO.get_project_by_id(session, task.project_id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üóë –î–ê, –£–î–ê–õ–ò–¢–¨", callback_data=f"delete_task_{task_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="delete_tasks_menu")
            ]
        ])
        
        status_names = {"planned": "‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞", "in_progress": "üîÑ –í —Ä–∞–±–æ—Ç–µ", "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞", "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"}
        status_text = status_names.get(task.status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        await callback.message.edit_text(
            f"üóë <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø</b>\n\n"
            f"üìù <b>–ó–∞–¥–∞—á–∞:</b> {task.title}\n"
            f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            f"üéØ <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
            f"üìÅ <b>–ü—Ä–æ–µ–∫—Ç:</b> {project.name if project else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n\n"
            f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n"
            f"–ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("delete_project_"))
async def delete_project_callback(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        await callback.answer("üóë –£–¥–∞–ª—è—é –ø—Ä–æ–µ–∫—Ç...")
        
        project_id = int(callback.data.split("_")[2])
        project = await ProjectDAO.get_project_by_id(session, project_id)
        
        if not project:
            await callback.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        await ProjectDAO.delete_project(session, project_id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîô –ö —É–¥–∞–ª–µ–Ω–∏—é", callback_data="delete_menu"),
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")
            ]
        ])
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω!</b>\n\n"
            f"üóë –£–¥–∞–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç: <b>{project.name}</b>\n"
            f"üìù –í—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã\n"
            f"üì¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –æ—á–∏—â–µ–Ω—ã\n\n"
            f"üí° –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("delete_task_"))
async def delete_task_callback(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    try:
        await callback.answer("üóë –£–¥–∞–ª—è—é –∑–∞–¥–∞—á—É...")
        
        task_id = int(callback.data.split("_")[2])
        task = await TaskDAO.get_task_by_id(session, task_id)
        
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        project = await ProjectDAO.get_project_by_id(session, task.project_id)
        task_title = task.title
        
        await TaskDAO.delete_task(session, task_id)
        
        update_message = ""
        if project and project.channel_id and project.message_id and bot:
            try:
                tasks = await TaskDAO.get_project_tasks(session, project.id)
                roadmap_text = format_roadmap_message(project, tasks)
                
                await bot.edit_message_text(
                    text=roadmap_text,
                    chat_id=project.channel_id,
                    message_id=project.message_id,
                    parse_mode="HTML"
                )
                
                update_message = "\nüîÑ Roadmap –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ!"
            except Exception as e:
                update_message = f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)[:50]}..."
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –µ—â–µ", callback_data="delete_tasks_menu"),
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")
            ]
        ])
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!</b>{update_message}\n\n"
            f"üóë –£–¥–∞–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: <b>{task_title}</b>\n"
            f"üìÅ –ò–∑ –ø—Ä–æ–µ–∫—Ç–∞: {project.name if project else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n\n"
            f"üí° –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("project_tasks_"))
async def project_tasks_callback(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏"""
    try:
        await callback.answer()
        
        parts = callback.data.split("_")
        project_id = int(parts[2])
        page = int(parts[3]) if len(parts) > 3 else 0
        
        project = await ProjectDAO.get_project_by_id(session, project_id)
        if not project:
            await callback.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        tasks = await TaskDAO.get_project_tasks(session, project_id)
        
        if not tasks:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É", callback_data=f"add_task_{project_id}")],
                [InlineKeyboardButton(text="üîô –ö –ø—Ä–æ–µ–∫—Ç—É", callback_data=f"show_roadmap_{project_id}")]
            ])
            
            await callback.message.edit_text(
                f"üìù <b>–ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ \"{project.name}\"</b>\n\n"
                "–£ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            return
        
        per_page = 10
        start_idx = page * per_page
        end_idx = start_idx + per_page
        
        keyboard_buttons = []
        for i, task in enumerate(tasks[start_idx:end_idx]):
            status_emoji = {"planned": "‚è≥", "in_progress": "üîÑ", "completed": "‚úÖ", "cancelled": "‚ùå"}
            emoji = status_emoji.get(task.status, "‚ùì")
            position = start_idx + i + 1
            
            row = []
            
            if position > 1:
                row.append(InlineKeyboardButton(text="‚¨Ü", callback_data=f"move_task_{task.id}_up"))
            else:
                row.append(InlineKeyboardButton(text="¬∑", callback_data="dummy"))
            
            row.append(InlineKeyboardButton(
                text=f"{position}.{emoji} {task.title[:18]}",
                callback_data=f"update_task_{task.id}"
            ))
            
            if position < len(tasks):
                row.append(InlineKeyboardButton(text="‚¨á", callback_data=f"move_task_{task.id}_down"))
            else:
                row.append(InlineKeyboardButton(text="¬∑", callback_data="dummy"))
            
            keyboard_buttons.append(row)
        
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data=f"project_tasks_{project_id}_{page-1}"))
        if end_idx < len(tasks):
            nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥ ‚û°Ô∏è", callback_data=f"project_tasks_{project_id}_{page+1}"))
        
        if nav_buttons:
            keyboard_buttons.append(nav_buttons)
        
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üîÄ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–∞ –ø–æ–∑–∏—Ü–∏—é", callback_data=f"move_any_task_{project_id}")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"add_task_{project_id}")],
            [InlineKeyboardButton(text="üîô –ö –ø—Ä–æ–µ–∫—Ç—É", callback_data=f"show_roadmap_{project_id}")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        completed = len([t for t in tasks if t.status == "completed"])
        in_progress = len([t for t in tasks if t.status == "in_progress"])
        planned = len([t for t in tasks if t.status == "planned"])
        cancelled = len([t for t in tasks if t.status == "cancelled"])
        
        page_info = f" (—Å—Ç—Ä. {page+1}/{((len(tasks)-1)//per_page)+1})" if len(tasks) > per_page else ""
        
        await callback.message.edit_text(
            f"üìù <b>–ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ \"{project.name}\"</b>{page_info}\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: <b>{completed}</b> | üîÑ –í —Ä–∞–±–æ—Ç–µ: <b>{in_progress}</b>\n"
            f"‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: <b>{planned}</b> | ‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: <b>{cancelled}</b>\n\n"
            f"üí° ‚¨Ü‚¨á - –±—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("move_task_") & F.data.endswith("_up"))
async def move_task_up_callback(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –≤–≤–µ—Ä—Ö"""
    try:
        task_id = int(callback.data.split("_")[2])
        task = await TaskDAO.get_task_by_id(session, task_id)
        
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        current_order = task.order_index
        if current_order <= 1:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ —É–∂–µ –≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É!", show_alert=True)
            return
            
        new_position = current_order - 1
        success = await TaskDAO.move_task_to_position(session, task_id, new_position)
        
        if success:
            await callback.answer("‚¨ÜÔ∏è –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤–≤–µ—Ä—Ö!")
            
            project = await ProjectDAO.get_project_by_id(session, task.project_id)
            if project and project.channel_id and project.message_id and bot:
                try:
                    updated_tasks = await TaskDAO.get_project_tasks(session, project.id)
                    roadmap_text = format_roadmap_message(project, updated_tasks)
                    
                    await bot.edit_message_text(
                        text=roadmap_text,
                        chat_id=project.channel_id,
                        message_id=project.message_id,
                        parse_mode="HTML"
                    )
                except:
                    pass
            
            await refresh_project_tasks_interface(callback, session, task.project_id)
            
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è!", show_alert=True)
            
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("move_task_") & F.data.endswith("_down"))
async def move_task_down_callback(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –≤–Ω–∏–∑"""
    try:
        task_id = int(callback.data.split("_")[2])
        task = await TaskDAO.get_task_by_id(session, task_id)
        
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        tasks = await TaskDAO.get_project_tasks(session, task.project_id)
        max_position = len(tasks)
        current_order = task.order_index
        
        if current_order >= max_position:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ —É–∂–µ –≤ —Å–∞–º–æ–º –Ω–∏–∑—É!", show_alert=True)
            return
        
        new_position = current_order + 1
        success = await TaskDAO.move_task_to_position(session, task_id, new_position)
        
        if success:
            await callback.answer("‚¨áÔ∏è –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤–Ω–∏–∑!")
            
            project = await ProjectDAO.get_project_by_id(session, task.project_id)
            if project and project.channel_id and project.message_id and bot:
                try:
                    updated_tasks = await TaskDAO.get_project_tasks(session, project.id)
                    roadmap_text = format_roadmap_message(project, updated_tasks)
                    
                    await bot.edit_message_text(
                        text=roadmap_text,
                        chat_id=project.channel_id,
                        message_id=project.message_id,
                        parse_mode="HTML"
                    )
                except:
                    pass
            
            await refresh_project_tasks_interface(callback, session, task.project_id)
            
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è!", show_alert=True)
            
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("move_any_task_"))
async def move_any_task_callback(callback: CallbackQuery, session: AsyncSession):
    """–í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é"""
    try:
        await callback.answer()
        
        project_id = int(callback.data.split("_")[3])
        project = await ProjectDAO.get_project_by_id(session, project_id)
        tasks = await TaskDAO.get_project_tasks(session, project_id)
        
        if not tasks:
            await callback.answer("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è!", show_alert=True)
            return
        
        keyboard_buttons = []
        for task in tasks:
            status_emoji = {"planned": "‚è≥", "in_progress": "üîÑ", "completed": "‚úÖ", "cancelled": "‚ùå"}
            emoji = status_emoji.get(task.status, "‚ùì")
            
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{task.order_index}. {emoji} {task.title[:25]}...",
                    callback_data=f"move_task_to_{task.id}"
                )
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"project_tasks_{project_id}_0")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            f"üîÄ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è</b>\n\n"
            f"üìÅ –ü—Ä–æ–µ–∫—Ç: <b>{project.name}</b>\n"
            f"üìù –í—Å–µ–≥–æ –∑–∞–¥–∞—á: <b>{len(tasks)}</b>\n\n"
            f"üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("move_task_to_"))
async def move_task_to_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é"""
    try:
        await callback.answer()
        
        task_id = int(callback.data.split("_")[3])
        task = await TaskDAO.get_task_by_id(session, task_id)
        
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        project = await ProjectDAO.get_project_by_id(session, task.project_id)
        tasks = await TaskDAO.get_project_tasks(session, task.project_id)
        
        await state.update_data(task_id=task_id, project_id=task.project_id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"project_tasks_{task.project_id}_0")]
        ])
        
        await callback.message.edit_text(
            f"üîÄ <b>–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n"
            f"üìù <b>–ó–∞–¥–∞—á–∞:</b> {task.title}\n"
            f"üìÅ <b>–ü—Ä–æ–µ–∫—Ç:</b> {project.name if project else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
            f"üìç <b>–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:</b> {task.order_index}\n\n"
            f"üí° <b>–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π:</b> 1-{len(tasks)}\n\n"
            f"üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é (1-{len(tasks)}):",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.set_state(MoveTaskStates.waiting_for_new_position)
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("select_project_"))
async def select_project_callback(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        await callback.answer()
        
        project_id = int(callback.data.split("_")[2])
        await state.update_data(project_id=project_id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
        ])
        
        await callback.message.edit_text(
            "üìù <b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞</b>\n\n"
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: \"–°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã\"</i>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.set_state(TaskStates.waiting_for_title)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("update_task_"))
async def update_task_callback(callback: CallbackQuery, session: AsyncSession):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    try:
        await callback.answer()
        
        task_id = int(callback.data.split("_")[2])
        task = await TaskDAO.get_task_by_id(session, task_id)
        
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        if task.status not in ["planned", "in_progress", "completed", "cancelled"]:
            await TaskDAO.update_task_status(session, task_id, "planned")
            task.status = "planned"
        
        statuses = []
        if task.status == "planned":
            statuses = [
                ("üîÑ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", "in_progress"),
                ("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å—Ä–∞–∑—É", "completed"),
                ("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancelled")
            ]
        elif task.status == "in_progress":
            statuses = [
                ("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", "completed"),
                ("‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", "planned"),
                ("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancelled")
            ]
        elif task.status == "cancelled":
            statuses = [
                ("‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", "planned"),
                ("üîÑ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", "in_progress"),
                ("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", "completed")
            ]
        elif task.status == "completed":
            statuses = [
                ("üîÑ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É", "in_progress"),
                ("‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", "planned"),
                ("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancelled")
            ]
        
        keyboard_buttons = []
        for status_text, status_value in statuses:
            callback_data = f"set_status_{task_id}_{status_value}"
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=status_text,
                    callback_data=callback_data
                )
            ])
        
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"confirm_delete_task_{task_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º", callback_data="manage_tasks")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        status_names = {
            "planned": "‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞", 
            "in_progress": "üîÑ –í —Ä–∞–±–æ—Ç–µ", 
            "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞", 
            "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
        }
        current_status = status_names.get(task.status, f"‚ùì {task.status}")
        
        message_text = (
            f"üîÑ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–µ–π</b>\n\n"
            f"üìù <b>{task.title}</b>\n"
            f"üìÑ {task.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
            f"üéØ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("set_status_"))
async def set_status_callback(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    try:
        parts = callback.data.split("_")
        if len(parts) < 4:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã!", show_alert=True)
            return
            
        task_id = int(parts[2])
        new_status = "_".join(parts[3:])

        success = await TaskDAO.update_task_status(session, task_id, new_status)
        
        if not success:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞!", show_alert=True)
            return
        
        task_after = await TaskDAO.get_task_by_id(session, task_id)
        
        if task_after.status != new_status:
            await callback.answer(f"‚ùå –°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
            return
        
        await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
        
        project = await ProjectDAO.get_project_by_id(session, task_after.project_id)
        
        update_message = ""
        if project and project.channel_id and project.message_id and bot:
            try:
                tasks = await TaskDAO.get_project_tasks(session, project.id)
                roadmap_text = format_roadmap_message(project, tasks)
                
                await bot.edit_message_text(
                    text=roadmap_text,
                    chat_id=project.channel_id,
                    message_id=project.message_id,
                    parse_mode="HTML"
                )
                
                update_message = "\nüîÑ Roadmap –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ!"
            except Exception as channel_error:
                error_str = str(channel_error).lower()
                if any(phrase in error_str for phrase in [
                    "bot was kicked",
                    "chat not found", 
                    "forbidden",
                    "bot is not a member",
                    "kicked from",
                    "not enough rights"
                ]):
                    await ProjectDAO.remove_channel_from_project(session, project.id)
                    update_message = "\n‚ö†Ô∏è –ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞. –ö–∞–Ω–∞–ª –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞."
                else:
                    update_message = f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(channel_error)[:50]}..."
        
        status_names = {
            "planned": "‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞", 
            "in_progress": "üîÑ –í —Ä–∞–±–æ—Ç–µ", 
            "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞", 
            "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
        }
        new_status_text = status_names.get(new_status, f"‚ùì {new_status}")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏", callback_data="manage_tasks"),
                InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")
            ]
        ])
        
        await callback.message.edit_text(
            f"‚úÖ <b>–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω!</b>{update_message}\n\n"
            f"üìù <b>{task_after.title}</b>\n"
            f"üéØ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status_text}\n"
            f"üìÅ –ü—Ä–æ–µ–∫—Ç: {project.name if project else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("show_roadmap_"))
async def show_roadmap_callback(callback: CallbackQuery, session: AsyncSession):
    try:
        await callback.answer()
        
        project_id = int(callback.data.split("_")[2])
        project = await ProjectDAO.get_project_by_id(session, project_id)
        
        if not project:
            await callback.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        tasks = await TaskDAO.get_project_tasks(session, project_id)
        roadmap_text = format_roadmap_message(project, tasks)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"add_task_{project.id}"),
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"update_channel_{project.id}")
            ],
            [
                InlineKeyboardButton(text="üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏", callback_data=f"project_tasks_{project.id}_0"),
                InlineKeyboardButton(text="üì¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"set_channel_{project.id}")
            ],
            [
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data=f"confirm_delete_project_{project.id}"),
                InlineKeyboardButton(text="üîô –ö –ø—Ä–æ–µ–∫—Ç–∞–º", callback_data="my_projects")
            ]
        ])
        
        await callback.message.edit_text(
            roadmap_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("add_task_"))
async def add_task_callback(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∫ –ø—Ä–æ–µ–∫—Ç—É"""
    try:
        await callback.answer()
        
        project_id = int(callback.data.split("_")[2])
        await state.update_data(project_id=project_id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
        ])
        
        await callback.message.edit_text(
            "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏</b>\n\n"
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.set_state(TaskStates.waiting_for_title)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("update_channel_"))
async def update_channel_callback(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    try:
        project_id = int(callback.data.split("_")[2])
        project = await ProjectDAO.get_project_by_id(session, project_id)

        if not project:
            await callback.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        if not project.channel_id:
            await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!", show_alert=True)
            return
        
        channel_status = await check_bot_in_channel(bot, project.channel_id)
        
        if channel_status["status"] == "ok":
            try:
                tasks = await TaskDAO.get_project_tasks(session, project_id)
                roadmap_text = format_roadmap_message(project, tasks)
                
                if project.message_id:
                    await bot.edit_message_text(
                        text=roadmap_text,
                        chat_id=project.channel_id,
                        message_id=project.message_id,
                        parse_mode="HTML"
                    )
                    update_message = "‚úÖ Roadmap —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ!"
                else:
                    sent_message = await bot.send_message(
                        chat_id=project.channel_id,
                        text=roadmap_text,
                        parse_mode="HTML"
                    )
                    await ProjectDAO.update_roadmap_message(session, project_id, sent_message.message_id)
                    update_message = "‚úÖ –ù–æ–≤—ã–π Roadmap –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!"
                
                await callback.answer(update_message, show_alert=False)

            except Exception as e:
                error_msg = str(e).lower()
                
                if "message is not modified" in error_msg:
                    await callback.answer("‚úÖ Roadmap –∞–∫—Ç—É–∞–ª–µ–Ω - –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç!", show_alert=False)
                
                elif "message not found" in error_msg or "message_id_invalid" in error_msg or "bad request: message to edit not found" in error_msg:
                    await ProjectDAO.remove_channel_from_project(session, project.id)
                    await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ Roadmap –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞.\n–ö–∞–Ω–∞–ª –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞.", show_alert=True)
                
                elif "message too long" in error_msg or "request entity too large" in error_msg:
                    try:
                        try:
                            await bot.delete_message(chat_id=project.channel_id, message_id=project.message_id)
                        except:
                            pass  
                        
                        sent_message = await bot.send_message(
                            chat_id=project.channel_id,
                            text=roadmap_text,
                            parse_mode="HTML"
                        )
                        await ProjectDAO.update_roadmap_message(session, project_id, sent_message.message_id)
                        await callback.answer("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Roadmap - —Å—Ç–∞—Ä—ã–π –±—ã–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º!", show_alert=False)
                        
                    except Exception as e2:
                        await ProjectDAO.remove_channel_from_project(session, project.id)
                        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π Roadmap.\n–ö–∞–Ω–∞–ª –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞.", show_alert=True)
                
                else:
                    await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)[:100]}...", show_alert=True)
                
        else:
            await ProjectDAO.remove_channel_from_project(session, project.id)
            await callback.answer("‚ùå –ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞ - –æ—Ç–≤—è–∑—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª!", show_alert=True)
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("set_channel_"))
async def set_channel_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        await callback.answer()
        
        project_id = int(callback.data.split("_")[2])
        project = await ProjectDAO.get_project_by_id(session, project_id)
        
        if not project:
            await callback.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        await state.update_data(project_id=project_id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
        ])
        
        current_channel = f"\n\nüîó –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: <code>{project.channel_id}</code>" if project.channel_id else ""
        
        await callback.message.edit_text(
            f"üì¢ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞</b>\n\n"
            f"üìÅ –ü—Ä–æ–µ–∫—Ç: <b>{project.name}</b>{current_channel}\n\n"
            f"üí¨ –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ username:\n\n"
            f"<b>–§–æ—Ä–º–∞—Ç—ã:</b>\n"
            f"‚Ä¢ @channel_username\n"
            f"‚Ä¢ -100123456789 (ID –∫–∞–Ω–∞–ª–∞)\n"
            f"‚Ä¢ 123456789 (ID —á–∞—Ç–∞)\n\n"
            f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.set_state(ChannelStates.waiting_for_channel_id)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "skip_description")
async def skip_description_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        await callback.answer()
        
        data = await state.get_data()
        
        if "name" not in data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            await state.clear()
            return
        
        user = await UserDAO.get_or_create_user(
            session=session,
            telegram_id=callback.from_user.id
        )
        
        project = await ProjectDAO.create_project(
            session=session,
            name=data["name"],
            description="",
            owner_id=user.id
        )
        
        await state.clear()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"add_task_{project.id}"),
                InlineKeyboardButton(text="üì¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"set_channel_{project.id}")
            ],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
        ])
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üìÅ <b>{project.name}</b>\n\n"
            f"üÜî ID: {project.id}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {project.created_at.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "skip_task_description")
async def skip_task_description_callback(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    try:
        await callback.answer()
        
        data = await state.get_data()
        
        if "title" not in data or "project_id" not in data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", show_alert=True)
            await state.clear()
            return
        
        user = await UserDAO.get_or_create_user(
            session=session,
            telegram_id=callback.from_user.id
        )
        
        task = await TaskDAO.create_task(
            session=session,
            title=data["title"],
            description="",
            project_id=data["project_id"],
            creator_id=user.id,
            priority="medium"
        )
        
        await state.clear()
        
        project = await ProjectDAO.get_project_by_id(session, data["project_id"])
        
        update_message = ""
        if project and project.channel_id and project.message_id and bot:
            try:
                tasks = await TaskDAO.get_project_tasks(session, project.id)
                roadmap_text = format_roadmap_message(project, tasks)
                
                await bot.edit_message_text(
                    text=roadmap_text,
                    chat_id=project.channel_id,
                    message_id=project.message_id,
                    parse_mode="HTML"
                )
                
                update_message = "\nüîÑ Roadmap –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ!"
            except Exception as e:
                update_message = f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)[:50]}..."
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
        ])
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>{update_message}\n\n"
            f"üìù <b>{task.title}</b>\n\n"
            f"üÜî ID: {task.id}\n"
            f"üìÅ –ü—Ä–æ–µ–∫—Ç: {project.name if project else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "back_to_start")
async def back_to_start_callback(callback: CallbackQuery, session: AsyncSession):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.answer()
        
        user = await UserDAO.get_or_create_user(
            session=session,
            telegram_id=callback.from_user.id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name
        )
        
        projects = await ProjectDAO.get_user_projects(session, user.id)
        total_tasks = 0
        completed_tasks = 0
        
        for project in projects:
            tasks = await TaskDAO.get_project_tasks(session, project.id)
            total_tasks += len(tasks)
            for task in tasks:
                if task.status == "completed":
                    completed_tasks += 1
        
        progress = int((completed_tasks / total_tasks) * 100) if total_tasks > 0 else 0
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìã –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="my_projects"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")
            ],
            [
                InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="create_project"),
                InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task_menu")
            ],
            [
                InlineKeyboardButton(text="üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏", callback_data="manage_tasks"),
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–µ–Ω–∏–µ", callback_data="delete_menu")
            ],
            [
                InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ])
        
        welcome_text = (
            f"üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.first_name}!</b>\n\n"
            f"üó∫ <b>RoadMapEx</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –≤ Telegram\n\n"
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üìÅ –ü—Ä–æ–µ–∫—Ç–æ–≤: <b>{len(projects)}</b>\n"
            f"üìù –ó–∞–¥–∞—á: <b>{total_tasks}</b>\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: <b>{completed_tasks}</b>\n"
            f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: <b>{progress}%</b>\n\n"
            f"üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await callback.message.edit_text(welcome_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "cancel_action")
async def cancel_action_callback(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    try:
        await callback.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
        ])
        
        await callback.message.edit_text(
            "‚ùå <b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "export_users_json")
async def export_users_json_callback(callback: CallbackQuery, session: AsyncSession):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON"""
    try:
        await callback.answer("üìÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –≤ JSON...")
        
        if callback.from_user.id != ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
            return
        
        all_users = await UserDAO.get_all_users(session)
        
        users_data = []
        for user in all_users:
            if user.username and user.username.lower().endswith('bot'):
                continue
            
            users_data.append({
                "id": str(user.telegram_id),
                "username": user.username or ""
            })
        
        import json
        json_content = json.dumps(users_data, ensure_ascii=False, indent=2)
        
        filename = f"users_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        from aiogram.types import BufferedInputFile
        file = BufferedInputFile(
            json_content.encode('utf-8'),
            filename=filename
        )
        
        await callback.message.answer_document(
            document=file,
            caption=f"üìÑ <b>–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                   f"üë• –í—Å–µ–≥–æ: <b>{len(users_data)}</b> (–±–µ–∑ –±–æ—Ç–æ–≤)\n"
                   f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "export_users_txt")
async def export_users_txt_callback(callback: CallbackQuery, session: AsyncSession):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ TXT"""
    try:
        await callback.answer("üìù –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—é –≤ TXT...")
        
        if callback.from_user.id != ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
            return
        
        all_users = await UserDAO.get_all_users(session)
        
        txt_lines = []
        for user in all_users:
            if user.username and user.username.lower().endswith('bot'):
                continue
            txt_lines.append(str(user.telegram_id))
        
        txt_content = '\n'.join(txt_lines)
        
        filename = f"users_ids_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        from aiogram.types import BufferedInputFile
        file = BufferedInputFile(
            txt_content.encode('utf-8'),
            filename=filename
        )
        
        await callback.message.answer_document(
            document=file,
            caption=f"üìù <b>–≠–∫—Å–ø–æ—Ä—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                   f"üë• –í—Å–µ–≥–æ: <b>{len(txt_lines)}</b> (–±–µ–∑ –±–æ—Ç–æ–≤)\n"
                   f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}", show_alert=True)

async def refresh_project_tasks_interface(callback: CallbackQuery, session: AsyncSession, project_id: int, page: int = 0):
    """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        project = await ProjectDAO.get_project_by_id(session, project_id)
        if not project:
            return
        
        tasks = await TaskDAO.get_project_tasks(session, project_id)
        if not tasks:
            return
        
        per_page = 10
        start_idx = page * per_page
        end_idx = start_idx + per_page
        
        keyboard_buttons = []
        for i, task in enumerate(tasks[start_idx:end_idx]):
            status_emoji = {"planned": "‚è≥", "in_progress": "üîÑ", "completed": "‚úÖ", "cancelled": "‚ùå"}
            emoji = status_emoji.get(task.status, "‚ùì")
            position = start_idx + i + 1
            
            row = []
            
            if position > 1:
                row.append(InlineKeyboardButton(text="‚¨Ü", callback_data=f"move_task_{task.id}_up"))
            else:
                row.append(InlineKeyboardButton(text="¬∑", callback_data="dummy"))
            
            row.append(InlineKeyboardButton(
                text=f"{position}.{emoji} {task.title[:18]}",
                callback_data=f"update_task_{task.id}"
            ))
            
            if position < len(tasks):
                row.append(InlineKeyboardButton(text="‚¨á", callback_data=f"move_task_{task.id}_down"))
            else:
                row.append(InlineKeyboardButton(text="¬∑", callback_data="dummy"))
            
            keyboard_buttons.append(row)
        
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data=f"project_tasks_{project_id}_{page-1}"))
        if end_idx < len(tasks):
            nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥ ‚û°Ô∏è", callback_data=f"project_tasks_{project_id}_{page+1}"))
        
        if nav_buttons:
            keyboard_buttons.append(nav_buttons)
        
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üîÄ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–∞ –ø–æ–∑–∏—Ü–∏—é", callback_data=f"move_any_task_{project_id}")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"add_task_{project_id}")],
            [InlineKeyboardButton(text="üîô –ö –ø—Ä–æ–µ–∫—Ç—É", callback_data=f"show_roadmap_{project_id}")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        completed = len([t for t in tasks if t.status == "completed"])
        in_progress = len([t for t in tasks if t.status == "in_progress"])
        planned = len([t for t in tasks if t.status == "planned"])
        cancelled = len([t for t in tasks if t.status == "cancelled"])
        
        page_info = f" (—Å—Ç—Ä. {page+1}/{((len(tasks)-1)//per_page)+1})" if len(tasks) > per_page else ""
        
        new_text = (
            f"üìù <b>–ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ \"{project.name}\"</b>{page_info}\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: <b>{completed}</b> | üîÑ –í —Ä–∞–±–æ—Ç–µ: <b>{in_progress}</b>\n"
            f"‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: <b>{planned}</b> | ‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: <b>{cancelled}</b>\n\n"
            f"üí° ‚¨Ü‚¨á - –±—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á"
        )
        
        await callback.message.edit_text(
            new_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except:
        pass

@router.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ callback"""
    try:
        await callback.answer()
        await help_command(callback.message)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "dummy")
async def dummy_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É—Å—Ç—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await callback.answer()

@router.message()
async def unknown_message_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    
    await message.answer(
        "‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/add_project - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
        "/roadmap - –ü–æ–∫–∞–∑–∞—Ç—å Roadmap",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query()
async def unknown_callback_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤"""
    await callback.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
